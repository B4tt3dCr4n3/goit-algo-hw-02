"""Завдання 3. У багатьох мовах програмування ми маємо справу з виразами, 
виділеними символами-розділювачами, такими як круглі ( ), квадратні [ ] або 
фігурні дужки { }.

Напишіть програму, яка читає рядок з послідовністю символів-розділювачів, 
наприклад, ( ) { [ ] ( ) ( ) { } } }, і надає відповідне повідомлення, коли розділювачі 
симетричні, несиметричні, наприклад ( ( ( ) , або коли розділювачі різних видів стоять 
у парі, як-от ( }."""

def check_delimiters(expression):
    # Стек для зберігання відкритих розділювачів
    stack = []
    # Відповідність між відкритими та закритими розділювачами
    pairs = {')': '(', ']': '[', '}': '{'}
    for char in expression:
        # Якщо символ є відкритим розділювачем, додаємо його до стеку
        if char in '([{':
            stack.append(char)
        # Якщо символ є закритим розділювачем
        elif char in ')]}': # Якщо стек пустий або верхній елемент стеку не відповідає поточному закритому розділювачу
            if not stack or stack.pop() != pairs[char]:
                return "Несиметрично"
    # Якщо після обходу всіх символів стек не пустий, значить, не всі розділювачі закриті
    return "Симетрично" if not stack else "Несиметрично"

# Приклади використання
print(check_delimiters("( ){[ ]( 1 + 3 )( ){ }}"))  # Симетрично
print(check_delimiters("( 23 ( 2 - 3)"))  # Несиметрично
print(check_delimiters("( 11 }"))  # Несиметрично
